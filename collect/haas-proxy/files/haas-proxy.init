#!/bin/sh /etc/rc.common

USE_PROCD=1
START=99
STOP=10
EXTRA_COMMANDS="firewall"

DEFAULT_LOCAL_PORT=2525
DEFAULT_FIREWALL_ZONE="wan"
DEFAULT_LOG="none"
DEFAULT_LOG_LEVEL="warning"

firewall_drop() {
	iptables -t nat -L | grep 'Chain' | while read -r _ chain _; do
		iptables -t nat -L "$chain" --line-numbers | awk '/\/\* !haas:.* \*\// {print $1}' | sort -r | \
				while read -r num; do
			# Note: we remove rules by number from last one to not shift down rules to be removed
			iptables -t nat -D "$chain" "$num"
		done
	done
}

iptables_insert() {
	iptables -C "$@" 2>/dev/null || iptables -I "$@"
}

_firewall_zone() {
	local fw_zone="$1"
	# Note: variable port is from caller
	iptables_insert "zone_${fw_zone}_prerouting" -t nat -p tcp -m tcp --dport 22 -m comment --comment "!haas:dnat" -j DNAT --to-destination ":$port"
	iptables_insert "zone_${fw_zone}_prerouting" -t nat -p tcp -m tcp --dport 22 -m comment --comment "!haas:mark" -j MARK --set-mark 0x10
}

firewall() {
	firewall_drop

	config_load haas
	local port fw_zone
	config_get port settings local_port "$DEFAULT_LOCAL_PORT"
	config_get fw_zone settings fw_zone
	if [ -n "$fw_zone" ]; then
		config_list_foreach settings fw_zone _firewall_zone
	else
		_firewall_zone "$DEFAULT_FIREWALL_ZONE"
	fi
}

start_service() {
	config_load haas
	local token log log_level port
	config_get token settings token ''
	config_get log settings log "$DEFAULT_LOG"
	config_get log_level settings log_level "$DEFAULT_LOG_LEVEL"
	config_get port settings local_port "$DEFAULT_LOCAL_PORT"
	[ -n "$token" ] || {
		echo "Token not set. Please set HAAS token to allow it to start." >&2
		exit 1
	}

	firewall

	procd_open_instance
	procd_set_param command /usr/libexec/haas-proxy-start -n haas_proxy --log-level="$log_level" --device-token="$token" --port="$port"
	[ -z "$log" -o "$log" = "none" ] || procd_append_param command --log="$log"
	procd_set_param respawn "${respawn_threshold:-3600}" "${respawn_timeout:-5}" "${respawn_retry:-5}"
	procd_set_param file /etc/config/haas
	procd_close_instance
}

stop_service() {
	firewall_drop
}
