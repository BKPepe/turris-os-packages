From 0ffb0dc90450011ebd2270c3c2069ac901ee9687 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Petr=C3=A1=C4=8Dek?= <martin@petracek.net>
Date: Sat, 15 Jul 2017 20:18:22 +0200
Subject: [PATCH 2/2] ethernet headers for NFQ

---
 src/flow.c        | 14 ++++++++++++++
 src/flow.h        |  6 ++++++
 src/output-json.c | 57 ++++++++++++++++++++++++++++++++-----------------------
 src/source-nfq.c  |  8 ++++++++
 src/source-nfq.h  |  2 ++
 5 files changed, 63 insertions(+), 24 deletions(-)

diff --git a/src/flow.c b/src/flow.c
index c371b54e..20bb4029 100644
--- a/src/flow.c
+++ b/src/flow.c
@@ -309,6 +309,13 @@ void FlowHandlePacketUpdate(Flow *f, Packet *p)
             f->flags &= ~FLOW_PROTO_DETECT_TS_DONE;
             p->flags |= PKT_PROTO_DETECT_TS_DONE;
         }
+#ifdef NFQ
+    if (!f->hw_address_src_known && p->nfq_v.hw_address_known){
+        SCLogDebug("setting src MAC address %02x:%02x:%02x:%02x:%02x:%02x", p->nfq_v.hw_address[0], p->nfq_v.hw_address[1], p->nfq_v.hw_address[2], p->nfq_v.hw_address[3], p->nfq_v.hw_address[4], p->nfq_v.hw_address[5]);
+        f->hw_address_src_known = 1;
+        memcpy(f->hw_address_src, p->nfq_v.hw_address, 6);
+    }
+#endif
     } else {
         f->tosrcpktcnt++;
         f->tosrcbytecnt += GET_PKT_LEN(p);
@@ -324,6 +331,13 @@ void FlowHandlePacketUpdate(Flow *f, Packet *p)
             f->flags &= ~FLOW_PROTO_DETECT_TC_DONE;
             p->flags |= PKT_PROTO_DETECT_TC_DONE;
         }
+#ifdef NFQ
+    if (!f->hw_address_dst_known && p->nfq_v.hw_address_known){
+        SCLogDebug("setting dst MAC address %02x:%02x:%02x:%02x:%02x:%02x", p->nfq_v.hw_address[0], p->nfq_v.hw_address[1], p->nfq_v.hw_address[2], p->nfq_v.hw_address[3], p->nfq_v.hw_address[4], p->nfq_v.hw_address[5]);
+        f->hw_address_dst_known = 1;
+        memcpy(f->hw_address_dst, p->nfq_v.hw_address, 6);
+    }
+#endif
     }
 
     if ((f->flags & (FLOW_TO_DST_SEEN|FLOW_TO_SRC_SEEN)) == (FLOW_TO_DST_SEEN|FLOW_TO_SRC_SEEN)) {
diff --git a/src/flow.h b/src/flow.h
index 93ca7afc..fe696676 100644
--- a/src/flow.h
+++ b/src/flow.h
@@ -435,6 +435,12 @@ typedef struct Flow_
     uint32_t tosrcpktcnt;
     uint64_t todstbytecnt;
     uint64_t tosrcbytecnt;
+#ifdef NFQ
+    uint8_t hw_address_src[6];
+    uint8_t hw_address_src_known;
+    uint8_t hw_address_dst[6];
+    uint8_t hw_address_dst_known;
+#endif
 } Flow;
 
 enum FlowState {
diff --git a/src/output-json.c b/src/output-json.c
index 78d7a69d..d6850140 100644
--- a/src/output-json.c
+++ b/src/output-json.c
@@ -470,37 +470,46 @@ json_t *CreateJSONHeader(const Packet *p, int direction_sensitive,
             break;
     }
 
-    if (p->ethh) {
+    if (p->ethh
+#ifdef NFQ
+        || (p->flow && (p->flow->hw_address_src_known || p->flow->hw_address_dst_known))
+#endif
+    ) {
         json_t *ejs = json_object();
         if (ejs != NULL) {
             char eth_addr[19];
-            uint8_t *src, *dst;
+            const uint8_t *src=NULL, *dst=NULL;
 
-            if ((PKT_IS_TOSERVER(p))) {
-                src = p->ethh->eth_dst;
-                dst = p->ethh->eth_src;
-            } else {
+            if (p->ethh) {
                 src = p->ethh->eth_src;
                 dst = p->ethh->eth_dst;
             }
-
-            json_object_set_new(ejs, "type", json_integer(ntohs(p->ethh->eth_type)));
-            snprintf(eth_addr, 19, "%02x:%02x:%02x:%02x:%02x:%02x",
-                    src[0],
-                    src[1],
-                    src[2],
-                    src[3],
-                    src[4],
-                    src[5]);
-            json_object_set_new(ejs, "src", json_string(eth_addr));
-            snprintf(eth_addr, 19, "%02x:%02x:%02x:%02x:%02x:%02x",
-                    dst[0],
-                    dst[1],
-                    dst[2],
-                    dst[3],
-                    dst[4],
-                    dst[5]);
-            json_object_set_new(ejs, "dst", json_string(eth_addr));
+#ifdef NFQ
+            else {
+                if (p->flow->hw_address_src_known) src=p->flow->hw_address_src;
+                if (p->flow->hw_address_dst_known) dst=p->flow->hw_address_dst;
+            }
+#endif
+            if (src) {
+                snprintf(eth_addr, 19, "%02x:%02x:%02x:%02x:%02x:%02x",
+                        src[0],
+                        src[1],
+                        src[2],
+                        src[3],
+                        src[4],
+                        src[5]);
+                json_object_set_new(ejs, "src", json_string(eth_addr));
+            }
+            if (dst) {
+                snprintf(eth_addr, 19, "%02x:%02x:%02x:%02x:%02x:%02x",
+                        dst[0],
+                        dst[1],
+                        dst[2],
+                        dst[3],
+                        dst[4],
+                        dst[5]);
+                json_object_set_new(ejs, "dst", json_string(eth_addr));
+            }
             json_object_set_new(js, "ether", ejs);
         }
     }
diff --git a/src/source-nfq.c b/src/source-nfq.c
index 4c13f5a7..0acb1099 100644
--- a/src/source-nfq.c
+++ b/src/source-nfq.c
@@ -426,6 +426,7 @@ static int NFQSetupPkt (Packet *p, struct nfq_q_handle *qh, void *data)
     int ret;
     char *pktdata;
     struct nfqnl_msg_packet_hdr *ph;
+    struct nfqnl_msg_packet_hw *hwaddr;
 
     ph = nfq_get_msg_packet_hdr(tb);
     if (ph != NULL) {
@@ -433,6 +434,13 @@ static int NFQSetupPkt (Packet *p, struct nfq_q_handle *qh, void *data)
         //p->nfq_v.hw_protocol = ntohs(p->nfq_v.ph->hw_protocol);
         p->nfq_v.hw_protocol = ph->hw_protocol;
     }
+    hwaddr = nfq_get_packet_hw(tb);
+    if (hwaddr != NULL) {
+        p->nfq_v.hw_address_known = 1;
+        memcpy(p->nfq_v.hw_address, hwaddr->hw_addr, 6);
+    } else {
+        p->nfq_v.hw_address_known = 0;
+    }
     /* coverity[missing_lock] */
     p->nfq_v.mark = nfq_get_nfmark(tb);
     if (nfq_config.mode == NFQ_REPEAT_MODE) {
diff --git a/src/source-nfq.h b/src/source-nfq.h
index 374b3332..98af68f1 100644
--- a/src/source-nfq.h
+++ b/src/source-nfq.h
@@ -45,6 +45,8 @@ typedef struct NFQPacketVars_
     uint32_t ifi;
     uint32_t ifo;
     uint16_t hw_protocol;
+    uint8_t hw_address_known;
+    uint8_t hw_address[6];
 } NFQPacketVars;
 
 typedef struct NFQQueueVars_
-- 
2.11.0

