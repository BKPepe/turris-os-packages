From a91b8108b53e2d2ea1bdf554b5f5d15449eecc61 Mon Sep 17 00:00:00 2001
From: Michal Hrusecky <michal.hrusecky@nic.cz>
Date: Thu, 13 Jul 2017 14:41:19 +0200
Subject: [PATCH] Backported https://github.com/inliniac/suricata/pull/2700

---
 doc/userguide/output/eve/eve-json-output.rst |  5 +++
 qa/coccinelle/struct-flags.cocci             | 44 +++++++++++++++-----------
 src/detect-engine-profile.c                  |  2 +-
 src/output-json-alert.c                      |  6 ++--
 src/output-json-dnp3.c                       |  6 ++--
 src/output-json-dns.c                        |  4 +--
 src/output-json-drop.c                       |  3 +-
 src/output-json-file.c                       |  3 +-
 src/output-json-http.c                       |  4 ++-
 src/output-json-smtp.c                       |  4 ++-
 src/output-json-ssh.c                        |  3 +-
 src/output-json-template.c                   |  3 +-
 src/output-json-tls.c                        |  3 +-
 src/output-json.c                            | 47 ++++++++++++++++++++++++++--
 src/output-json.h                            |  4 +--
 src/util-logopenfile.h                       |  5 +++
 suricata.yaml.in                             |  2 ++
 17 files changed, 111 insertions(+), 37 deletions(-)

diff --git a/doc/userguide/output/eve/eve-json-output.rst b/doc/userguide/output/eve/eve-json-output.rst
index 104fc10..f560f39 100644
--- a/doc/userguide/output/eve/eve-json-output.rst
+++ b/doc/userguide/output/eve/eve-json-output.rst
@@ -33,6 +33,8 @@ The most common way to use this is through 'EVE', which is a firehose approach w
       #  pipelining:
       #    enabled: yes ## set enable to yes to enable query pipelining
       #    batch-size: 10 ## number of entry to keep in buffer
+      # Log ethernet header in events when available
+      #log-ethernet: yes
       types:
         - alert:
             # payload: yes             # enable dumping payload in Base64
@@ -115,6 +117,9 @@ The most common way to use this is through 'EVE', which is a firehose approach w
 Each alert, http log, etc will go into this one file: 'eve.json'. This file
 can then be processed by 3rd party tools like Logstash or jq.
 
+If log-ethernet is set to yes, then ethernet headers will be added to events
+if available.
+
 Output types
 ~~~~~~~~~~~~
 
diff --git a/qa/coccinelle/struct-flags.cocci b/qa/coccinelle/struct-flags.cocci
index 45fab73..dc55fb4 100644
--- a/qa/coccinelle/struct-flags.cocci
+++ b/qa/coccinelle/struct-flags.cocci
@@ -1,35 +1,37 @@
 @flags@
-SignatureHeader *struct0;
-identifier struct_flags0 =~ "^(?!SIG_FLAG).+";
-Signature *struct1;
-identifier struct_flags1 =~ "^(?!SIG_FLAG).+";
-Signature *struct2;
+LogFileCtx *struct0;
+identifier struct_flags0 =~ "^(?!LOGFILE_LOG).+";
+Packet *struct1;
+identifier struct_flags1 =~ "^(?!FLOW_PKT_).+";
+SignatureInitData *struct2;
 identifier struct_flags2 =~ "^(?!SIG_FLAG_INIT_).+";
-Flow *struct3;
-identifier struct_flags3 =~ "^(?!FLOW_).+";
+Signature *struct3;
+identifier struct_flags3 =~ "^(?!SIG_FLAG).+";
 TcpSegment *struct4;
 identifier struct_flags4 =~ "^(?!SEGMENTTCP_FLAG).+";
 TcpStream *struct5;
 identifier struct_flags5 =~ "^(?!STREAMTCP_STREAM_FLAG_).+";
 TcpSession *struct6;
 identifier struct_flags6 =~ "^(?!STREAMTCP_FLAG).+";
-Packet *struct7;
-identifier struct_flags7 =~ "^(?!FLOW_PKT_).+";
+Flow *struct7;
+identifier struct_flags7 =~ "^(?!FLOWFILE_).+";
+Flow *struct8;
+identifier struct_flags8 =~ "^(?!FLOW_END_FLAG_).+";
 position p1;
 @@
 
 (
-struct0->flags@p1 |= struct_flags0
+struct0->option_flags@p1 |= struct_flags0
 |
-struct0->flags@p1 & struct_flags0
+struct0->option_flags@p1 & struct_flags0
 |
-struct0->flags@p1 &= ~struct_flags0
+struct0->option_flags@p1 &= ~struct_flags0
 |
-struct1->flags@p1 |= struct_flags1
+struct1->flowflags@p1 |= struct_flags1
 |
-struct1->flags@p1 & struct_flags1
+struct1->flowflags@p1 & struct_flags1
 |
-struct1->flags@p1 &= ~struct_flags1
+struct1->flowflags@p1 &= ~struct_flags1
 |
 struct2->init_flags@p1 |= struct_flags2
 |
@@ -61,11 +63,17 @@ struct6->flags@p1 & struct_flags6
 |
 struct6->flags@p1 &= ~struct_flags6
 |
-struct7->flowflags@p1 |= struct_flags7
+struct7->file_flags@p1 |= struct_flags7
 |
-struct7->flowflags@p1 & struct_flags7
+struct7->file_flags@p1 & struct_flags7
 |
-struct7->flowflags@p1 &= ~struct_flags7
+struct7->file_flags@p1 &= ~struct_flags7
+|
+struct8->flow_end_flags@p1 |= struct_flags8
+|
+struct8->flow_end_flags@p1 & struct_flags8
+|
+struct8->flow_end_flags@p1 &= ~struct_flags8
 )
 
 @script:python@
diff --git a/src/detect-engine-profile.c b/src/detect-engine-profile.c
index c602417..2e14e0e 100644
--- a/src/detect-engine-profile.c
+++ b/src/detect-engine-profile.c
@@ -56,7 +56,7 @@ static void DumpFp(const SigMatch *sm, char *pat_orig, uint32_t pat_orig_sz, cha
 SCMutex g_rule_dump_write_m = SCMUTEX_INITIALIZER;
 void RulesDumpMatchArray(const DetectEngineThreadCtx *det_ctx, const Packet *p)
 {
-    json_t *js = CreateJSONHeader(p, 0, "inspectedrules");
+    json_t *js = CreateJSONHeader(p, 0, "inspectedrules", 0);
     if (js == NULL)
         return;
     json_t *ir = json_object();
diff --git a/src/output-json-alert.c b/src/output-json-alert.c
index c589f12..c7a1ba5 100644
--- a/src/output-json-alert.c
+++ b/src/output-json-alert.c
@@ -245,7 +245,8 @@ static int AlertJson(ThreadVars *tv, JsonAlertLogThread *aft, const Packet *p)
     if (p->alerts.cnt == 0 && !(p->flags & PKT_HAS_TAG))
         return TM_ECODE_OK;
 
-    json_t *js = CreateJSONHeader((Packet *)p, 0, "alert");
+    json_t *js = CreateJSONHeader((Packet *)p, 0, "alert",
+                                  json_output_ctx->file_ctx->options_flags);
     if (unlikely(js == NULL))
         return TM_ECODE_OK;
 
@@ -424,7 +425,8 @@ static int AlertJson(ThreadVars *tv, JsonAlertLogThread *aft, const Packet *p)
     if ((p->flags & PKT_HAS_TAG) && (json_output_ctx->flags &
             LOG_JSON_TAGGED_PACKETS)) {
         MemBufferReset(aft->json_buffer);
-        json_t *packetjs = CreateJSONHeader((Packet *)p, 0, "packet");
+        json_t *packetjs = CreateJSONHeader((Packet *)p, 0, "packet",
+                                            json_output_ctx->file_ctx->options_flags);
         if (unlikely(packetjs != NULL)) {
             AlertJsonPacket(p, packetjs);
             OutputJSONBuffer(packetjs, aft->file_ctx, &aft->json_buffer);
diff --git a/src/output-json-dnp3.c b/src/output-json-dnp3.c
index e726959..88969d0 100644
--- a/src/output-json-dnp3.c
+++ b/src/output-json-dnp3.c
@@ -311,7 +311,8 @@ static int JsonDNP3LoggerToServer(ThreadVars *tv, void *thread_data,
 
     MemBufferReset(buffer);
     if (tx->has_request && tx->request_done) {
-        json_t *js = CreateJSONHeader((Packet *)p, 1, "dnp3");
+        json_t *js = CreateJSONHeader((Packet *)p, 1, "dnp3",
+                                      thread->dnp3log_ctx->file_ctx->options_flags);
         if (unlikely(js == NULL)) {
             return TM_ECODE_OK;
         }
@@ -337,7 +338,8 @@ static int JsonDNP3LoggerToClient(ThreadVars *tv, void *thread_data,
 
     MemBufferReset(buffer);
     if (tx->has_response && tx->response_done) {
-        json_t *js = CreateJSONHeader((Packet *)p, 1, "dnp3");
+        json_t *js = CreateJSONHeader((Packet *)p, 1, "dnp3",
+                                      thread->dnp3log_ctx->file_ctx->options_flags);
         if (unlikely(js == NULL)) {
             return TM_ECODE_OK;
         }
diff --git a/src/output-json-dns.c b/src/output-json-dns.c
index c8fb816..b90a3e7 100644
--- a/src/output-json-dns.c
+++ b/src/output-json-dns.c
@@ -629,7 +629,7 @@ static int JsonDnsLoggerToServer(ThreadVars *tv, void *thread_data,
     if (likely(dnslog_ctx->flags & LOG_QUERIES) != 0) {
         DNSQueryEntry *query = NULL;
         TAILQ_FOREACH(query, &tx->query_list, next) {
-            js = CreateJSONHeader((Packet *)p, 1, "dns");
+            js = CreateJSONHeader((Packet *)p, 1, "dns", dnslog_ctx->file_ctx->options_flags);
             if (unlikely(js == NULL))
                 return TM_ECODE_OK;
 
@@ -653,7 +653,7 @@ static int JsonDnsLoggerToClient(ThreadVars *tv, void *thread_data,
     json_t *js;
 
     if (likely(dnslog_ctx->flags & LOG_ANSWERS) != 0) {
-        js = CreateJSONHeader((Packet *)p, 0, "dns");
+        js = CreateJSONHeader((Packet *)p, 0, "dns", dnslog_ctx->file_ctx->options_flags);
         if (unlikely(js == NULL))
             return TM_ECODE_OK;
 
diff --git a/src/output-json-drop.c b/src/output-json-drop.c
index e26fd6d..344fc95 100644
--- a/src/output-json-drop.c
+++ b/src/output-json-drop.c
@@ -86,7 +86,8 @@ static int g_droplog_flows_start = 1;
 static int DropLogJSON (JsonDropLogThread *aft, const Packet *p)
 {
     uint16_t proto = 0;
-    json_t *js = CreateJSONHeader((Packet *)p, 0, "drop");//TODO const
+    json_t *js = CreateJSONHeader((Packet *)p, 0, "drop",
+                                  aft->drop_ctx->file_ctx->options_flags);//TODO const
     if (unlikely(js == NULL))
         return TM_ECODE_OK;
 
diff --git a/src/output-json-file.c b/src/output-json-file.c
index e840b66..305af5a 100644
--- a/src/output-json-file.c
+++ b/src/output-json-file.c
@@ -82,7 +82,8 @@ typedef struct JsonFileLogThread_ {
  */
 static void FileWriteJsonRecord(JsonFileLogThread *aft, const Packet *p, const File *ff)
 {
-    json_t *js = CreateJSONHeader((Packet *)p, 0, "fileinfo"); //TODO const
+    json_t *js = CreateJSONHeader((Packet *)p, 0, "fileinfo",
+                                  aft->filelog_ctx->file_ctx->options_flags); //TODO const
     json_t *hjs = NULL;
     if (unlikely(js == NULL))
         return;
diff --git a/src/output-json-http.c b/src/output-json-http.c
index a220252..2920d20 100644
--- a/src/output-json-http.c
+++ b/src/output-json-http.c
@@ -375,7 +375,9 @@ static int JsonHttpLogger(ThreadVars *tv, void *thread_data, const Packet *p, Fl
     htp_tx_t *tx = txptr;
     JsonHttpLogThread *jhl = (JsonHttpLogThread *)thread_data;
 
-    json_t *js = CreateJSONHeaderWithTxId((Packet *)p, 1, "http", tx_id); //TODO const
+    json_t *js = CreateJSONHeaderWithTxId((Packet *)p, 1, "http",
+                                          jhl->httplog_ctx->file_ctx->options_flags,
+                                          tx_id); //TODO const
     if (unlikely(js == NULL))
         return TM_ECODE_OK;
 
diff --git a/src/output-json-smtp.c b/src/output-json-smtp.c
index 6bec700..d90fc46 100644
--- a/src/output-json-smtp.c
+++ b/src/output-json-smtp.c
@@ -88,7 +88,9 @@ static int JsonSmtpLogger(ThreadVars *tv, void *thread_data, const Packet *p, Fl
     JsonEmailLogThread *jhl = (JsonEmailLogThread *)thread_data;
 
     json_t *sjs;
-    json_t *js = CreateJSONHeaderWithTxId((Packet *)p, 1, "smtp", tx_id);
+    json_t *js = CreateJSONHeaderWithTxId((Packet *)p, 1, "smtp",
+                                          jhl->emaillog_ctx->file_ctx->options_flags,
+                                          tx_id);
     if (unlikely(js == NULL))
         return TM_ECODE_OK;
 
diff --git a/src/output-json-ssh.c b/src/output-json-ssh.c
index 627b2b6..720eac7 100644
--- a/src/output-json-ssh.c
+++ b/src/output-json-ssh.c
@@ -111,7 +111,8 @@ static int JsonSshLogger(ThreadVars *tv, void *thread_data, const Packet *p)
     if (ssh_state->cli_hdr.software_version == NULL || ssh_state->srv_hdr.software_version == NULL)
         goto end;
 
-    json_t *js = CreateJSONHeader((Packet *)p, 1, "ssh");//TODO
+    json_t *js = CreateJSONHeader((Packet *)p, 1, "ssh",
+                                  ssh_ctx->file_ctx->options_flags);//TODO
     if (unlikely(js == NULL))
         goto end;
 
diff --git a/src/output-json-template.c b/src/output-json-template.c
index 3747121..c0c91c5 100644
--- a/src/output-json-template.c
+++ b/src/output-json-template.c
@@ -74,7 +74,8 @@ static int JsonTemplateLogger(ThreadVars *tv, void *thread_data,
 
     SCLogNotice("Logging template transaction %"PRIu64".", templatetx->tx_id);
     
-    js = CreateJSONHeader((Packet *)p, 0, "template");
+    js = CreateJSONHeader((Packet *)p, 0, "template",
+                          thread->templatelog_ctx->file_ctx->options_flags);
     if (unlikely(js == NULL)) {
         return TM_ECODE_FAILED;
     }
diff --git a/src/output-json-tls.c b/src/output-json-tls.c
index 0f75547..660f583 100644
--- a/src/output-json-tls.c
+++ b/src/output-json-tls.c
@@ -160,7 +160,8 @@ static int JsonTlsLogger(ThreadVars *tv, void *thread_data, const Packet *p,
             ssl_state->server_connp.cert0_subject == NULL)
         return 0;
 
-    json_t *js = CreateJSONHeader((Packet *)p, 1, "tls");
+    json_t *js = CreateJSONHeader((Packet *)p, 1, "tls"
+                                  tls_ctx->file_ctx->options_flags);
     if (unlikely(js == NULL))
         return 0;
 
diff --git a/src/output-json.c b/src/output-json.c
index ccf43b6..564433f 100644
--- a/src/output-json.c
+++ b/src/output-json.c
@@ -127,7 +127,7 @@ void CreateJSONFlowId(json_t *js, const Flow *f)
 }
 
 json_t *CreateJSONHeader(const Packet *p, int direction_sensitive,
-                         const char *event_type)
+                         const char *event_type, uint8_t options_flags)
 {
     char timebuf[64];
     char srcip[46], dstip[46];
@@ -270,13 +270,49 @@ json_t *CreateJSONHeader(const Packet *p, int direction_sensitive,
             break;
     }
 
+    if (options_flags & LOGFILE_LOG_ETHERNET && p->ethh) {
+        json_t *ejs = json_object();
+        if (ejs != NULL) {
+            char eth_addr[19];
+            uint8_t *src, *dst;
+
+            if ((PKT_IS_TOSERVER(p))) {
+                src = p->ethh->eth_dst;
+                dst = p->ethh->eth_src;
+            } else {
+                src = p->ethh->eth_src;
+                dst = p->ethh->eth_dst;
+            }
+
+            json_object_set_new(ejs, "type", json_integer(ntohs(p->ethh->eth_type)));
+            snprintf(eth_addr, 19, "%02x:%02x:%02x:%02x:%02x:%02x",
+                    src[0],
+                    src[1],
+                    src[2],
+                    src[3],
+                    src[4],
+                    src[5]);
+            json_object_set_new(ejs, "src", json_string(eth_addr));
+            snprintf(eth_addr, 19, "%02x:%02x:%02x:%02x:%02x:%02x",
+                    dst[0],
+                    dst[1],
+                    dst[2],
+                    dst[3],
+                    dst[4],
+                    dst[5]);
+            json_object_set_new(ejs, "dst", json_string(eth_addr));
+            json_object_set_new(js, "ether", ejs);
+        }
+    }
+
     return js;
 }
 
 json_t *CreateJSONHeaderWithTxId(const Packet *p, int direction_sensitive,
-                                 const char *event_type, uint64_t tx_id)
+                                 const char *event_type, uint8_t options_flags,
+                                 uint64_t tx_id)
 {
-    json_t *js = CreateJSONHeader(p, direction_sensitive, event_type);
+    json_t *js = CreateJSONHeader(p, direction_sensitive, event_type, options_flags);
     if (unlikely(js == NULL))
         return NULL;
 
@@ -513,6 +549,11 @@ OutputCtx *OutputJsonInitCtx(ConfNode *conf)
             }
         }
 
+        const char *v = ConfNodeLookupChildValue(conf, "log-ethernet");
+        if (v != NULL && ConfValIsTrue(v)) {
+            json_ctx->file_ctx->options_flags |= LOGFILE_LOG_ETHERNET;
+        }
+
         json_ctx->file_ctx->type = json_ctx->json_out;
     }
 
diff --git a/src/output-json.h b/src/output-json.h
index bb7d94d..025f9b8 100644
--- a/src/output-json.h
+++ b/src/output-json.h
@@ -41,8 +41,8 @@ int OutputJSONMemBufferCallback(const char *str, size_t size, void *data);
 
 void CreateJSONFlowId(json_t *js, const Flow *f);
 void JsonTcpFlags(uint8_t flags, json_t *js);
-json_t *CreateJSONHeader(const Packet *p, int direction_sensative, const char *event_type);
-json_t *CreateJSONHeaderWithTxId(const Packet *p, int direction_sensitive, const char *event_type, uint64_t tx_id);
+json_t *CreateJSONHeader(const Packet *p, int direction_sensative, const char *event_type, uint8_t options_flags);
+json_t *CreateJSONHeaderWithTxId(const Packet *p, int direction_sensitive, const char *event_type, uint8_t options_flags, uint64_t tx_id);
 int OutputJSONBuffer(json_t *js, LogFileCtx *file_ctx, MemBuffer **buffer);
 OutputCtx *OutputJsonInitCtx(ConfNode *);
 
diff --git a/src/util-logopenfile.h b/src/util-logopenfile.h
index cccbba4..d51f513 100644
--- a/src/util-logopenfile.h
+++ b/src/util-logopenfile.h
@@ -114,6 +114,9 @@ typedef struct LogFileCtx_ {
     /* flag to avoid multiple threads printing the same stats */
     uint8_t flags;
 
+    /* flag to store the options */
+    uint8_t options_flags; /* coccinelle: LogFileCtx:option_flags:LOGFILE_LOG */
+
     /* Flag if file is a regular file or not.  Only regular files
      * allow for rotataion. */
     uint8_t is_regular;
@@ -129,6 +132,8 @@ typedef struct LogFileCtx_ {
 #define LOGFILE_HEADER_WRITTEN 0x01
 #define LOGFILE_ALERTS_PRINTED 0x02
 
+#define LOGFILE_LOG_ETHERNET   BIT_U8(0)
+
 LogFileCtx *LogFileNewCtx(void);
 int LogFileFreeCtx(LogFileCtx *);
 int LogFileWrite(LogFileCtx *file_ctx, MemBuffer *buffer);
diff --git a/suricata.yaml.in b/suricata.yaml.in
index caecd07..e7c7001 100644
--- a/suricata.yaml.in
+++ b/suricata.yaml.in
@@ -157,6 +157,8 @@ outputs:
       #  pipelining:
       #    enabled: yes ## set enable to yes to enable query pipelining
       #    batch-size: 10 ## number of entry to keep in buffer
+      # Log ethernet header in events when available
+      #log-ethernet: yes
       types:
         - alert:
             # payload: yes             # enable dumping payload in Base64
-- 
2.13.2

