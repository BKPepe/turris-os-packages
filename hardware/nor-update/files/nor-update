#!/bin/sh
DEVEL=""
VERBOSE=""

SECURE_FIRMWARE="secure-firmware.bin"
SECURE_FIRMWARE_PART=""
SECURE_FIRMWARE_DEVEL=""

UBOOT="uboot"
UBOOT_PART=""
UBOOT_DEVEL=""

RESCUE="rescue"
RESCUE_PART=""
RESCUE_DEVEL="/usr/share/rescue-image/image.fit.lzma"

DTB="dtb"
DTB_PART=""
DTB_DEVEL=""


. "/usr/share/nor-update/config.sh"

print_help() {
    echo "Usage:"
    echo "    nor-update [-d] [-v]"
    echo
    echo "Options:"
    echo "    -d   Use devel version - bleeding edge, but might brick your device"
    echo "    -v   Be verbose about what is going on"
    echo "    -h   Show help"
}

flash() {
    local flashing="$1"
    local part="$2"
    shift 2

    [ -n "part" ] || return

    while [ -n "$1" ] && [ \! -r "$1" ]; do
        shift
    done

    if [ \! -r "$1" ]; then
        echo "Can't find anything to flash to '$flashing' partition"
        return
    fi

    if [ -c "/dev/$part" ]; then
        v_echo "Checking and flashing '$flashing' partition: $1 -> /dev/$part"
        if mtd verify "$1" "/dev/$part"; then
            v_echo "Partition with $flashing was up to date already."
        else
            mtd -e "/dev/$part" write "$1" "/dev/$part" || \
            die "Flashing '$flashing' partition (/dev/$part) failed!"
        fi
    else
        die "/dev/$part is missing!"
    fi
}

die() {
    echo "$1" >&2
    exit 1
}

# Echo that works only in verbose mode
v_echo() {
    [ -z "$VERBOSE" ] || echo "$@" >&2
}

# We need boot.scr in root of Btrfs partition to be symlink to @ subvolume to be able to boot
fix_boot_scr() {
    local dev="$(sed -n 's|^\(/dev/[a-z0-9]*\) / btrfs .*|\1|p' /proc/mounts)"
    # Fix is required only for BTRFS. No need to continue if root filesystem is not BTRFS.
    [ -n "$dev" ] || return
    local tmpdir="$(mktemp -d)"
    [ -n "$tmpdir" ] || die "Can't create a temp directory!"
    mount "$dev" "$tmpdir" || { rmdir "$tmpdir"; die "Can't mount root filesystem"; }
    if [ \! -e "$tmpdir"/boot.scr ]; then
        ln -sf @/boot/boot.scr "$tmpdir"/boot.scr || {
            umount "$tmpdir"
            rmdir "$tmpdir"
            die "Can't create boot.scr symlink"
        }
    fi
    umount "$tmpdir"
    rmdir "$tmpdir"
}

while [ -n "$1" ]; do
    case "$1" in
        "-d") DEVEL="y";;
        "-v") VERBOSE="y";;
        "-h") print_help
              exit 0
              ;;
        *) echo "Invalid usage!!!"
           print_help
           exit 1
           ;;
    esac
    shift
done

fix_boot_scr

# To simplify the configuration so we can use relative paths for parts of the firmware
cd "/usr/share/nor-update/"

if [ -n "$DEVEL" ]; then
    SECURE_FIRMWARE_DEVEL=""
    UBOOT_DEVEL=""
    RESCUE_DEVEL=""
    DTB_DEVEL=""
else
    [ -n "$DTB_DEVEL" ] || DTB_DEVEL="$(ls -1 /boot *turris*.dtb | head -n1)"
fi

flash "secure firmware" "$SECURE_FIRMWARE_PART" "$SECURE_FIRMWARE_DEVEL" "$SECURE_FIRMWARE"
flash "U-Boot" "$UBOOT_PART" "$UBOOT_DEVEL" "$UBOOT"
flash "rescue system" "$RESCUE_PART" "$RESCUE_DEVEL" "$RESCUE"
flash "dtb" "$DTB_PART" "$DTB_DEVEL" "$DTB"
# Backward compatibility with Turris 1.X, to be dropped
for m in mtd[0-9]; do
    flash "$m" "$m" "$m"
done
