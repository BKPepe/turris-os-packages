diff --git a/foris_controller/profiles.py b/foris_controller/profiles.py
index 07e7aaf9f36692c50cfd921eb125ad1826e73b1a..49c81620bdea8a1251d9cc74ed775fa22866d8d8 100644
--- a/foris_controller/profiles.py
+++ b/foris_controller/profiles.py
@@ -1,6 +1,6 @@
 #
 # foris-controller
-# Copyright (C) 2018 CZ.NIC, z.s.p.o. (http://www.nic.cz/)
+# Copyright (C) 2020 CZ.NIC, z.s.p.o. (http://www.nic.cz/)
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -22,6 +22,7 @@ WORKFLOW_UNSET = "unset"
 WORKFLOW_OLD = "old"
 WORKFLOW_ROUTER = "router"
 WORKFLOW_MIN = "min"
+WORKFLOW_SHIELD = "shield"
 WORKFLOW_BRIDGE = "bridge"
 
 STEP_PASSWORD = "password"
@@ -48,6 +49,7 @@ WORKFLOWS = {
         STEP_FINISHED,
     ],
     WORKFLOW_MIN: [STEP_PASSWORD, STEP_PROFILE, STEP_FINISHED],
+    WORKFLOW_SHIELD: [STEP_PASSWORD, STEP_FINISHED],
     WORKFLOW_BRIDGE: [
         STEP_PASSWORD,
         STEP_PROFILE,
diff --git a/foris_controller_backends/about/__init__.py b/foris_controller_backends/about/__init__.py
index 29d68e6f478e821f860a463d8a08a98c71a2dc1e..0f9445de055ce1aeda42c08b514ef89fcae4e65b 100644
--- a/foris_controller_backends/about/__init__.py
+++ b/foris_controller_backends/about/__init__.py
@@ -18,12 +18,14 @@
 #
 
 import logging
+import typing
 
 from foris_controller.app import app_info
-from foris_controller.utils import writelock, readlock, RWLock
-from foris_controller_backends.cmdline import BaseCmdLine, i2c_lock
-from foris_controller_backends.files import server_uplink_lock, BaseFile
+from foris_controller.exceptions import FailedToParseFileContent
 from foris_controller.updater import svupdater_branch
+from foris_controller.utils import RWLock, readlock, writelock
+from foris_controller_backends.cmdline import BaseCmdLine, i2c_lock
+from foris_controller_backends.files import BaseFile, server_uplink_lock
 
 logger = logging.getLogger(__name__)
 
@@ -54,6 +56,7 @@ class SystemInfoCmds(BaseCmdLine):
 class SystemInfoFiles(BaseFile):
     OS_RELEASE_PATH = "/etc/turris-version"
     MODEL_PATH = "/tmp/sysinfo/model"
+    CMDLINE_PATH = "/proc/cmdline"
     file_lock = RWLock(app_info["lock_backend"])
 
     @readlock(file_lock, logger)
@@ -65,6 +68,20 @@ class SystemInfoFiles(BaseFile):
         """
         return self._read_and_parse(SystemInfoFiles.OS_RELEASE_PATH, r"^([0-9]+(\.[0-9]+)*)$", (1,))
 
+    @readlock(file_lock, logger)
+    def get_contract(self) -> typing.Optional[str]:
+        """ Returns the contract router is under
+
+        :returns: contract
+        :rtype: str
+        """
+        try:
+            return self._read_and_parse(
+                SystemInfoFiles.CMDLINE_PATH, r"^.*turris_lists=contracts/([^\s]+)\s.*", (1,)
+            )
+        except FailedToParseFileContent:
+            return None
+
     def get_os_branch(self):
         """ Returns turris os branch
 
diff --git a/foris_controller_backends/files/__init__.py b/foris_controller_backends/files/__init__.py
index 49f3e258085d884db94f13d5f0ae549a105759af..d16e413757d9ce86052c0b11fe439f7522b9fca1 100644
--- a/foris_controller_backends/files/__init__.py
+++ b/foris_controller_backends/files/__init__.py
@@ -17,13 +17,12 @@
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 #
 
+import glob
 import logging
-import re
 import os
-import glob
+import re
 import shutil
 
-
 from foris_controller.app import app_info
 from foris_controller.exceptions import FailedToParseFileContent
 from foris_controller.utils import RWLock
diff --git a/foris_controller_backends/wan/__init__.py b/foris_controller_backends/wan/__init__.py
index 563b981d7c74cd1782244c7dcdb6f9a56c43301b..4037aad356373793ad1cbf66f599e60be33f6acc 100644
--- a/foris_controller_backends/wan/__init__.py
+++ b/foris_controller_backends/wan/__init__.py
@@ -1,6 +1,6 @@
 #
 # foris-controller
-# Copyright (C) 2018 CZ.NIC, z.s.p.o. (http://www.nic.cz/)
+# Copyright (C) 2020 CZ.NIC, z.s.p.o. (http://www.nic.cz/)
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -30,7 +30,7 @@ from foris_controller_backends.networks import NetworksCmd
 logger = logging.getLogger(__name__)
 
 
-class WanUci(object):
+class WanUci:
     def get_settings(self):
 
         with UciBackend() as backend:
@@ -293,6 +293,25 @@ class WanUci(object):
 
         return True
 
+    def update_uncofigured_wan_to_default(self) -> bool:
+        """
+        Updates wan if it was not configured to get IP address via DHCP
+
+        :returns: True if wan configuration was changed
+        """
+        with UciBackend() as backend:
+            network_data = backend.read("network")
+            wan_proto = get_option_named(network_data, "network", "wan", "proto")
+
+        if wan_proto == "none":
+            self.update_settings(
+                wan_settings={"wan_type": "dhcp", "wan_dhcp": {}},
+                wan6_settings={"wan6_type": "dhcpv6", "wan6_dhcpv6": {"duid": ""}},
+                mac_settings={"custom_mac_enabled": False},
+            )
+            return True
+        return False
+
 
 class WanTestCommands(AsyncCommand):
 
diff --git a/foris_controller_backends/web/__init__.py b/foris_controller_backends/web/__init__.py
index e98930ff29ef491932d4ec4230615368677bae36..2f40140c77f0361a992ebfa1213dc031d1b8bb2d 100644
--- a/foris_controller_backends/web/__init__.py
+++ b/foris_controller_backends/web/__init__.py
@@ -1,6 +1,6 @@
 #
 # foris-controller
-# Copyright (C) 2018 CZ.NIC, z.s.p.o. (http://www.nic.cz/)
+# Copyright (C) 2020 CZ.NIC, z.s.p.o. (http://www.nic.cz/)
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -20,21 +20,23 @@
 import logging
 import os
 import sys
-import turrishw
 
+import turrishw
 from foris_controller import profiles
+from foris_controller.exceptions import UciException, UciRecordNotFound
 from foris_controller_backends.about import SystemInfoFiles
 from foris_controller_backends.files import BaseMatch
 from foris_controller_backends.password import ForisPasswordUci
-from foris_controller_backends.uci import UciBackend, get_option_named, store_bool, parse_bool
-from foris_controller.exceptions import UciException, UciRecordNotFound
+from foris_controller_backends.maintain import MaintainCommands
+from foris_controller_backends.wan import WanUci
+from foris_controller_backends.uci import UciBackend, get_option_named, parse_bool, store_bool
 
 logger = logging.getLogger(__name__)
 
 DEFAULT_LANGUAGE = "en"
 
 
-class WebUciCommands(object):
+class WebUciCommands:
     @staticmethod
     def get_language(foris_data):
         try:
@@ -69,6 +71,8 @@ class WebUciCommands(object):
         else:
             if SystemInfoFiles().get_model() == "turris":
                 return profiles.WORKFLOW_OLD
+            elif SystemInfoFiles().get_contract() == "shield":
+                return profiles.WORKFLOW_SHIELD
         return profiles.WORKFLOW_UNSET
 
     @staticmethod
@@ -95,7 +99,12 @@ class WebUciCommands(object):
                     return [
                         e
                         for e in profiles.WORKFLOWS
-                        if e not in (profiles.WORKFLOW_OLD, profiles.WORKFLOW_UNSET)
+                        if e
+                        not in (
+                            profiles.WORKFLOW_OLD,
+                            profiles.WORKFLOW_UNSET,
+                            profiles.WORKFLOW_SHIELD,
+                        )
                     ]
                 else:
                     return [profiles.WORKFLOW_MIN, profiles.WORKFLOW_BRIDGE]
@@ -133,8 +142,14 @@ class WebUciCommands(object):
             WebUciCommands.update_passed("profile")
         else:
             with UciBackend() as backend:
+                foris_data = backend.read("foris")
                 backend.add_section("foris", "config", "wizard")
                 backend.set_option("foris", "wizard", "finished", store_bool(True))
+            if profiles.STEP_PASSWORD in self.get_guide_data(foris_data)["passed"]:
+                # if a password was try to update wan if it ws not configured
+                if WanUci().update_uncofigured_wan_to_default():
+                    MaintainCommands().restart_network()
+
             WebUciCommands.update_passed("finished")
 
         return True
diff --git a/foris_controller_modules/web/schema/web.json b/foris_controller_modules/web/schema/web.json
index 3ebf286035e2735643f31dd4f6bc7c6351845195..81c0117665591097f11445475a121c4f086ee04b 100644
--- a/foris_controller_modules/web/schema/web.json
+++ b/foris_controller_modules/web/schema/web.json
@@ -1,6 +1,6 @@
 {
     "definitions": {
-        "guide_workflows": {"enum": ["unset", "min", "old", "router", "bridge"]},
+        "guide_workflows": {"enum": ["unset", "min", "shield", "old", "router", "bridge"]},
         "guide_steps": {"enum": ["password", "profile", "networks", "wan", "time", "dns", "updater", "lan", "finished"]},
         "guide": {
             "oneOf": [
@@ -261,7 +261,7 @@
                 "data": {
                     "type": "object",
                     "properties": {
-                        "new_workflow": {"enum": ["unset", "old"]}
+                        "new_workflow": {"enum": ["unset", "old", "shield"]}
                     },
                     "additionalProperties": false
                 }
diff --git a/tests/blackbox/test_about.py b/tests/blackbox/test_about.py
index a8188f28d6c067323964c032e5b808e00e50d7a3..05cd417f057dbd0752224f172a76f08b42d67dcd 100644
--- a/tests/blackbox/test_about.py
+++ b/tests/blackbox/test_about.py
@@ -18,13 +18,15 @@
 #
 
 import os
-import pytest
 
+import pytest
 from foris_controller_testtools.fixtures import (
-    uci_configs_init,
-    infrastructure,
     file_root_init,
+    infrastructure,
+    lock_backend,
+    uci_configs_init,
 )
+from foris_controller_testtools.utils import FileFaker
 
 FILE_ROOT_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), "test_about_files")
 
@@ -44,3 +46,33 @@ def test_get_registration_number(infrastructure):
     )
     assert set(res.keys()) == {"action", "kind", "data", "module"}
     assert set(res["data"].keys()) == {u"registration_number"}
+
+
+@pytest.mark.parametrize(
+    "content,output",
+    (
+        (
+            "earlyprintk console=ttyS0,115200 rootfstype=btrfs rootdelay=2 "
+            "root=b301 rootflags=subvol=@,commit=5 rw cfg80211.freg=**",
+            None,
+        ),
+        (
+            "earlyprintk console=ttyS0,115200 rootfstype=btrfs rootdelay=2 "
+            " turris_lists=contracts/shield "
+            "root=b301 rootflags=subvol=@,commit=5 rw cfg80211.freg=**",
+            "shield",
+        ),
+    ),
+    ids=["none", "shield"],
+)
+def test_get_contract(content, output, lock_backend, file_root_init):
+    os.environ["FORIS_FILE_ROOT"] = FILE_ROOT_PATH
+    from foris_controller.app import app_info
+
+    app_info["lock_backend"] = lock_backend
+    from foris_controller_backends.about import SystemInfoFiles
+
+    with FileFaker(FILE_ROOT_PATH, "/proc/cmdline", False, content):
+        assert SystemInfoFiles().get_contract() == output
+
+    del os.environ["FORIS_FILE_ROOT"]
diff --git a/tests/blackbox/test_networks.py b/tests/blackbox/test_networks.py
index 99c0bb41880a60f1fcd69e0185f856b0c3100019..816cbcf6af898368e3bcf69d22e748c8673aa5c8 100644
--- a/tests/blackbox/test_networks.py
+++ b/tests/blackbox/test_networks.py
@@ -30,6 +30,7 @@ from foris_controller_testtools.fixtures import (
     turris_os_version,
     notify_api,
     UCI_CONFIG_DIR_PATH,
+    file_root_init
 )
 
 from foris_controller_testtools.utils import (
diff --git a/tests/blackbox/test_root/proc/cmdline b/tests/blackbox/test_root/proc/cmdline
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/tests/blackbox/test_time.py b/tests/blackbox/test_time.py
index 52fb73b3910680713e7f16d8c19a98171de4b7a1..b16ced42166fa31a901126a629f758e1d8d0ba79 100644
--- a/tests/blackbox/test_time.py
+++ b/tests/blackbox/test_time.py
@@ -29,6 +29,7 @@ from foris_controller_testtools.fixtures import (
     device,
     turris_os_version,
     UCI_CONFIG_DIR_PATH,
+    file_root_init,
 )
 from foris_controller_testtools.utils import check_service_result, get_uci_module
 
diff --git a/tests/blackbox/test_updater.py b/tests/blackbox/test_updater.py
index e7db5d8fb752163df28a3f7a0fd6f6e33e173c53..8e1bb9066ad1b8d3fc57a22ddfb64b1023b89d28 100644
--- a/tests/blackbox/test_updater.py
+++ b/tests/blackbox/test_updater.py
@@ -36,6 +36,7 @@ from foris_controller_testtools.fixtures import (
     device,
     turris_os_version,
     UCI_CONFIG_DIR_PATH,
+    file_root_init,
 )
 from foris_controller_testtools.utils import set_approval, get_uci_module, match_subdict
 
diff --git a/tests/blackbox/test_wan.py b/tests/blackbox/test_wan.py
index 0422bfc9744514f2cc48c0b218d1fee1ea8dfdf2..a255699bb94d69dafba14012a1c40b2217859dc2 100644
--- a/tests/blackbox/test_wan.py
+++ b/tests/blackbox/test_wan.py
@@ -28,6 +28,7 @@ from foris_controller_testtools.fixtures import (
     device,
     turris_os_version,
     UCI_CONFIG_DIR_PATH,
+    file_root_init,
 )
 from foris_controller_testtools.utils import (
     network_restart_was_called,
diff --git a/tests/blackbox/test_web.py b/tests/blackbox/test_web.py
index 06dd1b6c68807345bb0606b0cd79051a2f8bd853..ce8c73f884a7c14b014087032458d296b90e9c6d 100644
--- a/tests/blackbox/test_web.py
+++ b/tests/blackbox/test_web.py
@@ -16,34 +16,36 @@
 # along with this program; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 #
-import os
-import pytest
 import base64
+import os
 import sys
 
+import pytest
+from foris_controller import profiles
+from foris_controller.exceptions import UciRecordNotFound
 from foris_controller_testtools.fixtures import (
-    uci_configs_init,
-    infrastructure,
+    FILE_ROOT_PATH,
+    UCI_CONFIG_DIR_PATH,
+    device,
     file_root_init,
-    only_backends,
+    infrastructure,
     init_script_result,
-    FILE_ROOT_PATH,
     network_restart_command,
-    device,
+    only_backends,
     turris_os_version,
-    UCI_CONFIG_DIR_PATH,
+    uci_configs_init,
 )
 from foris_controller_testtools.utils import (
     FileFaker,
     get_uci_module,
-    prepare_turrishw_root,
     prepare_turrishw,
+    prepare_turrishw_root,
+    network_restart_was_called,
 )
-from foris_controller import profiles
-from foris_controller.exceptions import UciRecordNotFound
 
-
-NEW_WORKFLOWS = [e for e in profiles.WORKFLOWS if e not in profiles.WORKFLOW_OLD]
+NEW_WORKFLOWS = [
+    e for e in profiles.WORKFLOWS if e not in (profiles.WORKFLOW_OLD, profiles.WORKFLOW_SHIELD)
+]
 
 START_WORKFLOWS = [profiles.WORKFLOW_OLD, profiles.WORKFLOW_UNSET]
 FINISH_WORKFLOWS = [e for e in profiles.WORKFLOWS if e not in (profiles.WORKFLOW_UNSET)]
@@ -457,7 +459,10 @@ def test_reset_guide_openwrt(
 @pytest.mark.parametrize("device,turris_os_version", [("omnia", "4.0")], indirect=True)
 @pytest.mark.parametrize(
     "old_workflow,new_workflow",
-    [(profiles.WORKFLOW_OLD, profiles.WORKFLOW_OLD)]
+    [
+        (profiles.WORKFLOW_OLD, profiles.WORKFLOW_OLD),
+        (profiles.WORKFLOW_SHIELD, profiles.WORKFLOW_SHIELD),
+    ]
     + [
         (profiles.WORKFLOW_UNSET, e) for e in set(FINISH_WORKFLOWS).intersection(set(NEW_WORKFLOWS))
     ],
@@ -669,3 +674,59 @@ def test_walk_through_guide(
         last = set(profiles.WORKFLOWS[active_workflow]) != set(passed + [step])
         MAP[step](passed + [step], active_workflow, last)
         passed.append(step)
+
+
+@pytest.mark.parametrize("device,turris_os_version", [("mox", "4.0")], indirect=True)
+@pytest.mark.parametrize("password_set,wan_configured", ((True, True), (False, False)))
+@pytest.mark.only_backends(["openwrt"])
+def test_auto_set_unconfigured_wan(
+    password_set,
+    wan_configured,
+    file_root_init,
+    uci_configs_init,
+    infrastructure,
+    device,
+    turris_os_version,
+    network_restart_command,
+):
+    prepare_turrishw_root(device, turris_os_version)
+
+    uci = get_uci_module(infrastructure.name)
+    with uci.UciBackend(UCI_CONFIG_DIR_PATH) as backend:
+        backend.set_option("network", "wan", "proto", "none")
+
+    res = infrastructure.process_message(
+        {"module": "wan", "action": "get_settings", "kind": "request"}
+    )
+    assert res["data"]["wan_settings"]["wan_type"] == "none"
+
+    res = infrastructure.process_message(
+        {"module": "web", "action": "reset_guide", "kind": "request"}
+    )
+    assert res["data"] == {"result": True}
+
+    if password_set:
+
+        res = infrastructure.process_message(
+            {
+                "module": "password",
+                "action": "set",
+                "kind": "request",
+                "data": {"password": base64.b64encode(b"heslo").decode("utf-8"), "type": "foris"},
+            }
+        )
+        assert res["data"]["result"] is True
+
+    res = infrastructure.process_message(
+        {"module": "web", "action": "update_guide", "kind": "request", "data": {"enabled": False}}
+    )
+    assert res["data"]["result"] is True
+
+    res = infrastructure.process_message(
+        {"module": "wan", "action": "get_settings", "kind": "request"}
+    )
+    if wan_configured:
+        assert res["data"]["wan_settings"]["wan_type"] == "dhcp"
+        assert network_restart_was_called([])
+    else:
+        assert res["data"]["wan_settings"]["wan_type"] == "none"
diff --git a/tests/blackbox/test_wifi_files/proc/cmdline b/tests/blackbox/test_wifi_files/proc/cmdline
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
