No more magic

All the magic with backward compatibility confuses the hell out of OpenWRT with
uClibc. As we compile everything ourselves and we don't need to maintain
backward ABI compatibility, let's drop it.

My working suspicion - there was `dm_task_get_info` function and later
`dm_task_get_info_base` was exported as `dm_task_get_info`. Problem is that
`dm_task_get_info_base` calls `dm_task_get_info` and instead of calling the
real function it was calling the exported symbol, thus itself ending up in
infinite recursion.

Signed-off-by: Michal Hrusecky <michal.hrusecky@nic.cz>

diff --git a/libdm/ioctl/libdm-iface.c b/libdm/ioctl/libdm-iface.c
index e9566c2..db78035 100644
--- a/libdm/ioctl/libdm-iface.c
+++ b/libdm/ioctl/libdm-iface.c
@@ -681,7 +681,7 @@ int dm_format_dev(char *buf, int bufsize, uint32_t dev_major,
 	return 1;
 }
 
-int dm_task_get_info(struct dm_task *dmt, struct dm_info *info)
+int dm_task_get_info_real(struct dm_task *dmt, struct dm_info *info)
 {
 	if (!dmt->dmi.v4)
 		return 0;
@@ -2111,35 +2111,11 @@ void dm_lib_exit(void)
 	_version_checked = 0;
 }
 
-#if defined(__GNUC__)
-/*
- * Maintain binary backward compatibility.
- * Version script mechanism works with 'gcc' compatible compilers only.
- */
-
-/*
- * This following code is here to retain ABI compatibility after adding
- * the field deferred_remove to struct dm_info in version 1.02.89.
- *
- * Binaries linked against version 1.02.88 of libdevmapper or earlier
- * will use this function that returns dm_info without the
- * deferred_remove field.
- *
- * Binaries compiled against version 1.02.89 onwards will use
- * the new function dm_task_get_info_with_deferred_remove due to the
- * #define.
- *
- * N.B. Keep this function at the end of the file to make sure that
- * no code in this file accidentally calls it.
- */
-
-int dm_task_get_info_base(struct dm_task *dmt, struct dm_info *info);
-DM_EXPORT_SYMBOL_BASE(dm_task_get_info);
 int dm_task_get_info_base(struct dm_task *dmt, struct dm_info *info)
 {
 	struct dm_info new_info;
 
-	if (!dm_task_get_info(dmt, &new_info))
+	if (!dm_task_get_info_real(dmt, &new_info))
 		return 0;
 
 	memcpy(info, &new_info, offsetof(struct dm_info, deferred_remove));
@@ -2147,16 +2123,18 @@ int dm_task_get_info_base(struct dm_task *dmt, struct dm_info *info)
 	return 1;
 }
 
-int dm_task_get_info_with_deferred_remove(struct dm_task *dmt, struct dm_info *info);
-int dm_task_get_info_with_deferred_remove(struct dm_task *dmt, struct dm_info *info)
+int dm_task_get_info(struct dm_task *dmt, struct dm_info *info)
 {
 	struct dm_info new_info;
 
-	if (!dm_task_get_info(dmt, &new_info))
+	if (!dm_task_get_info_real(dmt, &new_info))
 		return 0;
 
 	memcpy(info, &new_info, offsetof(struct dm_info, internal_suspend));
 
 	return 1;
 }
-#endif
+
+int dm_task_get_info_with_deferred_remove(struct dm_task *dmt, struct dm_info *info) {
+	return dm_task_get_info(dmt, info);
+}
